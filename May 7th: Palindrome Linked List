/**
Given a singly linked list, determine if it is a palindrome.

Example 1:
Input: 1->2
Output: false

Example 2:
Input: 1->2->2->1
Output: true
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode current = head;
        boolean ispalindrome = true;
        Stack<Integer> stack = new Stack<Integer>();
        
        //create stack as a copy of the linkedlist
        while (current!=null){
            stack.push(current.val);
            current = current.next;
        }
        //iterate to compare if linked list equals stack popped end values (start = end)
        while (head!=null){
            int i=stack.pop();
            if(head.val==i){
                ispalindrome = true;
            }
            else{
                ispalindrome = false;
                break;
            }
        head = head.next;
        }
        return ispalindrome;
    }
}
